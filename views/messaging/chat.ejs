<%- include('../partials/header.ejs') %>

<div class="container mt-4">
  <div class="card">
    <div class="card-header">
      <h5 class="mb-0">Chat with <%= otherUser.firstName %> <%= otherUser.lastName %></h5>
    </div>
    <div class="card-body" style="height: 400px; overflow-y: auto">
      <div id="messages">
        <% messages.forEach(message => { %>
        <div class="message <%= message.sender._id.equals(currentUser.id) ? 'text-end' : '' %>">
          <small class="text-muted"><%= message.sender.firstName %>:</small>
          <p class="mb-1"><%= message.content %></p>
        </div>
        <% }) %>
      </div>
    </div>
    <div class="card-footer">
      <form id="messageForm" class="d-flex">
        <input type="hidden" id="recipientId" value="<%= otherUser._id %>" />
        <input type="text" id="messageInput" class="form-control me-2" placeholder="Type your message..." />
        <button type="submit" class="btn btn-primary">Send</button>
      </form>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const form = document.getElementById("messageForm");
  const input = document.getElementById("messageInput");
  const recipientId = document.getElementById("recipientId").value;
  const messagesDiv = document.getElementById("messages");

  socket.emit("join", "<%= currentUser.id %>");

  socket.on("connect", () => {
    console.log("Connected to socket.io");
  });

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    if (!input.value.trim()) return;

    const messageData = {
      recipient: recipientId,
      content: input.value.trim(),
    };

    // Add message to UI immediately for sender
    const messageElement = document.createElement("div");
    messageElement.className = `message text-end`;
    messageElement.innerHTML = `
      <small class="text-muted"><%= currentUser.firstName %>:</small>
      <p class="mb-1">${messageData.content}</p>
    `;
    messagesDiv.appendChild(messageElement);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;

    // Send to server
    socket.emit("chat message", messageData);

    // Clear input
    input.value = "";
  });

  socket.on("chat message", (data) => {
    // Only show message if it's from the other user
    if (data.sender !== "<%= currentUser.id %>") {
      const messageElement = document.createElement("div");
      messageElement.className = "message";
      messageElement.innerHTML = `
        <small class="text-muted"><%= otherUser.firstName %>:</small>
        <p class="mb-1">${data.content}</p>
      `;
      messagesDiv.appendChild(messageElement);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
  });
</script>

<style>
  .message {
    margin-bottom: 1rem;
  }
  .message p {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    background-color: #f1f1f1;
    margin-bottom: 0.2rem;
  }
  .message.text-end p {
    background-color: #007bff;
    color: white;
  }
</style>

<%- include('../partials/footer.ejs') %>
